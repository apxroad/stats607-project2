from __future__ import annotations
import argparse
from pathlib import Path
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from src.plotstyle import apply_plot_style

SQRT2PI = np.sqrt(2.0 * np.pi)

def std_norm_pdf(x: np.ndarray) -> np.ndarray:
    return np.exp(-0.5 * x**2) / SQRT2PI

def main():
    ap = argparse.ArgumentParser(
        description="Part C — plot pooled Z only (with standard normal overlay)."
    )
    ap.add_argument(
        "--csv", required=True,
        help="CSV produced by src_cli.partc_log_prop26 (must contain a 'Z' column)."
    )
    ap.add_argument(
        "--title",
        default="Proposition 2.6: α=5, base=uniform"
    )
    ap.add_argument("--bins", default="auto", help='Histogram bins (int or "auto").')
    args = ap.parse_args()

    apply_plot_style()

    df = pd.read_csv(args.csv)
    # Find Z column case-insensitively
    zcol = next((c for c in df.columns if c.lower() == "z"), None)
    if zcol is None:
        raise ValueError(f"No 'Z' column found in {args.csv}; columns={list(df.columns)}")

    # Robust numeric conversion
    z = pd.to_numeric(df[zcol], errors="coerce").to_numpy()
    z = z[~np.isnan(z)]

    if z.size == 0:
        raise ValueError("All Z values are NaN after conversion.")

    mu, sd = float(np.mean(z)), float(np.std(z, ddof=1)) if z.size > 1 else float("nan")

    # Decide bins and x-limits
    bins = args.bins
    if isinstance(bins, str) and bins != "auto":
        try:
            bins = int(bins)
        except Exception:
            bins = "auto"

    # If data are nearly constant, widen the range so the histogram is visible
    zmin, zmax = float(np.min(z)), float(np.max(z))
    very_narrow = (zmax - zmin) < 1e-6
    if very_narrow:
        zmin, zmax = zmin - 0.5, zmax + 0.5

    # Plot
    fig, ax = plt.subplots(figsize=(8.5, 5.5))
    ax.hist(z, bins=bins, density=True)
    ax.set_xlabel("Z")
    ax.set_ylabel("Density")
    ax.set_title(args.title + f" — Z histogram (mean={mu:.2f}, sd={sd:.2f})")
    ax.set_xlim(zmin, zmax)

    # Standard normal overlay
    # Choose a reasonable x-grid covering both the data range and +/- 4
    left  = min(zmin, -4.0)
    right = max(zmax,  4.0)
    xs = np.linspace(left, right, 500)
    ax.plot(xs, std_norm_pdf(xs), lw=2, label="N(0,1) pdf")
    ax.legend(frameon=False)

    fig.tight_layout()

    outdir = Path("results/figures"); outdir.mkdir(parents=True, exist_ok=True)
    stem = Path(args.csv).stem
    out_png = outdir / f"prop26_zcheck_{stem}.png"
    fig.savefig(out_png)
    fig.savefig(out_png.with_suffix(".pdf"))
    print(f"[ok] wrote {out_png}")
    print(f"[ok] wrote {out_png.with_suffix('.pdf')}")
    print(f"[info] Z summary: n={z.size}, mean={mu:.4f}, sd={sd:.4f}, min={np.min(z):.4f}, max={np.max(z):.4f}")

if __name__ == "__main__":
    main()
